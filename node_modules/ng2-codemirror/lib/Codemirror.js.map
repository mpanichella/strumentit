{"version":3,"sources":["Codemirror.es6"],"names":[],"mappings":";;;;;;;;;;;;AACA;;AAUA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBa,mB,WAAA,mB,WAXZ,qBAAU;AACT,YAAU,YADD;AAET,aAAW,CACT;AACE,qCADF;AAEE,iBAAa,sBAAW;AAAA,aAAM,mBAAN;AAAA,KAAX,CAFf;AAGE,WAAO;AAHT,GADS,CAFF;AAST;AATS,CAAV,C,UAaE,kB,UAEA,mB,UAEA,qBAAU,MAAV,C,UAGA,mB,UAQA,kB;;;;;;AAHD,iCAAa;AAAA;;AAAA;;AAAA;;AAAA,SATb,MASa,QATb,MASa;;AAAA;;AAAA,SANb,MAMa,GANJ,EAMI;;AAAA;AAAE;;;;;;;;;kCAaF,CAEZ;;;;;;;;sCAKgB;AACf,WAAK,MAAL,GAAc,KAAK,MAAL,IAAe,EAA7B;AACA,WAAK,cAAL,CAAoB,KAAK,MAAzB;AACD;;;;;;;;mCAKc,M,EAAO;AAAA;;AACpB,WAAK,QAAL,GAAgB,qBAAW,YAAX,CAAwB,KAAK,IAAL,CAAU,aAAlC,EAAiD,MAAjD,CAAhB;AACA,WAAK,QAAL,CAAc,EAAd,CAAiB,QAAjB,EAA2B,YAAM;AAC/B,cAAK,WAAL,CAAiB,MAAK,QAAL,CAAc,QAAd,EAAjB;AACD,OAFD;AAGD;;;;;;;;gCAKW,K,EAAM;AAChB,WAAK,KAAL,GAAa,KAAb;AACA,WAAK,QAAL,CAAc,KAAd;AACA,WAAK,SAAL;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB;AACD;;;;;;;;+BAKU,K,EAAM;AACf,WAAK,MAAL,GAAc,SAAS,EAAvB;AACA,UAAI,KAAK,QAAT,EAAmB;AACjB,aAAK,QAAL,CAAc,QAAd,CAAuB,KAAK,MAA5B;AACD;AACF;;;6BACQ,C,EAAE,CAAE;;;gCACF,CAAE;;;qCACI,E,EAAG;AAAC,WAAK,QAAL,GAAgB,EAAhB;AAAoB;;;sCACvB,E,EAAG;AAAC,WAAK,SAAL,GAAiB,EAAjB;AAAqB;;;wBAvD1B;AAAE,aAAO,KAAK,MAAZ;AAAqB,K;sBACrB,C,EAAG;AACpB,UAAI,MAAM,KAAK,MAAf,EAAuB;AACrB,aAAK,MAAL,GAAc,CAAd;AACA,aAAK,QAAL,CAAc,CAAd;AACD;AACF;;;;;;;gBApBQ,M;;;;;WAEU,wB;;;;;gBAEA,I;;;;;WAGE,I;;;;;;;;IA4EV,gB,WAAA,gB,YARZ,oBAAS;AACR,gBAAc,CACZ,mBADY,CADN;AAIR,WAAS,CACP,mBADO;AAJD,CAAT,C","file":"Codemirror.js","sourcesContent":["// Imports\nimport {\n  NgModule,\n  Component,\n  Input,\n  Output,\n  ElementRef,\n  ViewChild,\n  EventEmitter,\n  forwardRef\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport CodeMirror from 'codemirror';\n\n/**\n * CodeMirror component\n * Usage :\n * <codemirror [(ngModel)]=\"data\" [config]=\"{...}\"></ckeditor>\n */\n@Component({\n  selector: 'codemirror',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CodemirrorComponent),\n      multi: true\n    }\n  ],\n  template: `<textarea #host></textarea>`,\n})\nexport class CodemirrorComponent {\n\n  @Input() config;\n\n  @Output() change = new EventEmitter();\n  editor;\n  @ViewChild('host') host;\n\n  _value = '';\n  @Output() instance = null;\n\n  /**\n   * Constructor\n   */\n  constructor(){}\n\n  get value(): any { return this._value; };\n  @Input() set value(v) {\n    if (v !== this._value) {\n      this._value = v;\n      this.onChange(v);\n    }\n  }\n\n  /**\n   * On component destroy\n   */\n  ngOnDestroy(){\n\n  }\n\n  /**\n   * On component view init\n   */\n  ngAfterViewInit(){\n    this.config = this.config || {};\n    this.codemirrorInit(this.config);\n  }\n\n  /**\n   * Initialize codemirror\n   */\n  codemirrorInit(config){\n    this.instance = CodeMirror.fromTextArea(this.host.nativeElement, config);\n    this.instance.on('change', () => {\n      this.updateValue(this.instance.getValue());\n    });\n  }\n\n  /**\n   * Value update process\n   */\n  updateValue(value){\n    this.value = value;\n    this.onChange(value);\n    this.onTouched();\n    this.change.emit(value);\n  }\n\n  /**\n   * Implements ControlValueAccessor\n   */\n  writeValue(value){\n    this._value = value || '';\n    if (this.instance) {\n      this.instance.setValue(this._value);\n    }\n  }\n  onChange(_){}\n  onTouched(){}\n  registerOnChange(fn){this.onChange = fn;}\n  registerOnTouched(fn){this.onTouched = fn;}\n}\n\n/**\n * CodemirrorModule\n */\n@NgModule({\n  declarations: [\n    CodemirrorComponent,\n  ],\n  exports: [\n    CodemirrorComponent,\n  ]\n})\nexport class CodemirrorModule{}\n"],"sourceRoot":"/source/"}